---
version: '2'
services:
  zookeeper:
    image: "confluentinc/cp-zookeeper:4.1.0"
    hostname: zookeeper
    ports:
      - '32181:32181'
    environment:
      ZOOKEEPER_CLIENT_PORT: 32181
      ZOOKEEPER_TICK_TIME: 2000
    extra_hosts:
      - "moby:127.0.0.1"

  kafka:
    image: "confluentinc/cp-enterprise-kafka:4.1.0"
    hostname: kafka
    ports:
      - '9092:9092'
      - '29092:29092'
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:32181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka:29092
      CONFLUENT_METRICS_REPORTER_ZOOKEEPER_CONNECT: zookeeper:32181
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'true'
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'
    extra_hosts:
      - "moby:127.0.0.1"

  schema-registry:
    image: "confluentinc/cp-schema-registry:4.1.0"
    hostname: schema-registry
    depends_on:
      - zookeeper
      - kafka
    ports:
      - '8081:8081'
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: zookeeper:32181
    extra_hosts:
      - "moby:127.0.0.1"

  # rest interface for kafka cluster
  kafka-rest:
    image: confluentinc/cp-kafka-rest:latest
    hostname: kafka-rest
    ports:
      - 29080:29080
    depends_on:
      - zookeeper
      - kafka
      - schema-registry
    environment:
      KAFKA_REST_ZOOKEEPER_CONNECT: zookeeper:32181
      KAFKA_REST_LISTENERS: http://kafka-rest:29080
      KAFKA_REST_SCHEMA_REGISTRY_URL: http://schema-registry:29081
      KAFKA_REST_HOST_NAME: kafka-rest
      KAFKA_REST_BOOTSTRAP_SERVERS: kafka:29092
    extra_hosts:
      - "moby:127.0.0.1"
      - "localhost: 127.0.0.1"

  # # This "container" is a workaround to pre-create topics as by default topics cannot be
  # auto created inside the cp-kafka docker image
  kafka-create-topics:
    image: confluentinc/cp-kafka:4.1.0
    depends_on:
      - kafka
    hostname: kafka-create-topics
    # We defined a dependency on "kafka", but `depends_on` will NOT wait for the
    # dependencies to be "ready" before starting the "kafka-create-topics"
    # container;  it waits only until the dependencies have started.  Hence we
    # must control startup order more explicitly.
    # See https://docs.docker.com/compose/startup-order/
    command: "bash -c 'echo Waiting for Kafka to be ready... && \
                       cub kafka-ready -b kafka:29092 1 120 && \
                       kafka-topics --create --topic requests --if-not-exists --zookeeper zookeeper:32181 --partitions 4 --replication-factor 1 && \
                       kafka-topics --create --topic request_sets --if-not-exists --zookeeper zookeeper:32181 --partitions 4 --replication-factor 1 && \
                       kafka-topics --create --topic request_summaries --if-not-exists --zookeeper zookeeper:32181 --partitions 4 --replication-factor 1 && \
                       sleep infinity'"
    environment:
      # The following settings are listed here only to satisfy the image's requirements.
      # We override the image's `command` anyways, hence this container will not start a broker.
      KAFKA_BROKER_ID: ignored
      KAFKA_ZOOKEEPER_CONNECT: ignored
    extra_hosts:
      - "moby:127.0.0.1"
      - "localhost: 127.0.0.1"

  # starts the request listener than monitors mongodb for new requests
  request-listener:
    build: ./1_request_listener/
    depends_on:
      - kafka
      - zookeeper
      - kafka-create-topics
    hostname: request-listener
    ports:
      - "29990:9990"
    stdin_open: true
    tty: true
    extra_hosts:
      - "moby:127.0.0.1"
      - "localhost: 127.0.0.1"

  # starts the request listener than monitors mongodb for new requests
  create-request-set:
    build: ./2_create_request_set/
    depends_on:
      - kafka
      - zookeeper
      - kafka-create-topics
    hostname: create-request-set
    ports:
      - "29991:9991"
    stdin_open: true
    tty: true
    extra_hosts:
      - "moby:127.0.0.1"
      - "localhost: 127.0.0.1"

    # starts the request listener than monitors mongodb for new requests
  summarize-request-set:
    build: ./3_summarize_request_set/
    depends_on:
      - kafka
      - zookeeper
      - kafka-create-topics
    hostname: summarize-request-set
    ports:
      - "29992:9992"
    stdin_open: true
    tty: true
    extra_hosts:
      - "moby:127.0.0.1"
      - "localhost: 127.0.0.1"
    